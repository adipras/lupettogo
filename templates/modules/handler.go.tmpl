package handlers

import (
	"net/http"
	"strconv"

	"{{.ProjectName}}/internal/services"
	"github.com/gin-gonic/gin"
)

type __Module__Handler struct {
	__module__Service *services.__Module__Service
}

func New__Module__Handler(__module__Service *services.__Module__Service) *__Module__Handler {
	return &__Module__Handler{
		__module__Service: __module__Service,
	}
}

// Get__Module__s godoc
// @Summary Get all __module__s
// @Description Get a list of all __module__s
// @Tags __module__s
// @Accept json
// @Produce json
// @Success 200 {array} models.__Module__
// @Router /__module__s [get]
func (h *__Module__Handler) Get__Module__s(c *gin.Context) {
	__module__s, err := h.__module__Service.GetAll__Module__s()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, __module__s)
}

// Get__Module__ godoc
// @Summary Get a __module__ by ID
// @Description Get a single __module__ by its ID
// @Tags __module__s
// @Accept json
// @Produce json
// @Param id path int true "__Module__ ID"
// @Success 200 {object} models.__Module__
// @Failure 404 {object} map[string]string
// @Router /__module__s/{id} [get]
func (h *__Module__Handler) Get__Module__(c *gin.Context) {
	idStr := c.Param("id")
	id, err := strconv.ParseUint(idStr, 10, 32)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID format"})
		return
	}

	__module__, err := h.__module__Service.Get__Module__ByID(uint(id))
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "__Module__ not found"})
		return
	}

	c.JSON(http.StatusOK, __module__)
}

// Create__Module__ godoc
// @Summary Create a new __module__
// @Description Create a new __module__ with the given data
// @Tags __module__s
// @Accept json
// @Produce json
// @Param __module__ body models.__Module__ true "__Module__ object"
// @Success 201 {object} models.__Module__
// @Failure 400 {object} map[string]string
// @Router /__module__s [post]
func (h *__Module__Handler) Create__Module__(c *gin.Context) {
	var __module__ models.__Module__
	if err := c.ShouldBindJSON(&__module__); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	created__Module__, err := h.__module__Service.Create__Module__(&__module__)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusCreated, created__Module__)
}

// Update__Module__ godoc
// @Summary Update a __module__
// @Description Update a __module__ with the given data
// @Tags __module__s
// @Accept json
// @Produce json
// @Param id path int true "__Module__ ID"
// @Param __module__ body models.__Module__ true "__Module__ object"
// @Success 200 {object} models.__Module__
// @Failure 400 {object} map[string]string
// @Failure 404 {object} map[string]string
// @Router /__module__s/{id} [put]
func (h *__Module__Handler) Update__Module__(c *gin.Context) {
	idStr := c.Param("id")
	id, err := strconv.ParseUint(idStr, 10, 32)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID format"})
		return
	}

	var __module__ models.__Module__
	if err := c.ShouldBindJSON(&__module__); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	__module__.ID = uint(id)
	updated__Module__, err := h.__module__Service.Update__Module__(&__module__)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, updated__Module__)
}

// Delete__Module__ godoc
// @Summary Delete a __module__
// @Description Delete a __module__ by ID
// @Tags __module__s
// @Accept json
// @Produce json
// @Param id path int true "__Module__ ID"
// @Success 204
// @Failure 404 {object} map[string]string
// @Router /__module__s/{id} [delete]
func (h *__Module__Handler) Delete__Module__(c *gin.Context) {
	idStr := c.Param("id")
	id, err := strconv.ParseUint(idStr, 10, 32)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID format"})
		return
	}

	if err := h.__module__Service.Delete__Module__(uint(id)); err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "__Module__ not found"})
		return
	}

	c.Status(http.StatusNoContent)
}